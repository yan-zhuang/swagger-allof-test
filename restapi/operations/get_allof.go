package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllofHandlerFunc turns a function with the right signature into a get allof handler
type GetAllofHandlerFunc func(GetAllofParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllofHandlerFunc) Handle(params GetAllofParams) middleware.Responder {
	return fn(params)
}

// GetAllofHandler interface for that can handle valid get allof params
type GetAllofHandler interface {
	Handle(GetAllofParams) middleware.Responder
}

// NewGetAllof creates a new http.Handler for the get allof operation
func NewGetAllof(ctx *middleware.Context, handler GetAllofHandler) *GetAllof {
	return &GetAllof{Context: ctx, Handler: handler}
}

/*GetAllof swagger:route GET /allof getAllof

GetAllof get allof API

*/
type GetAllof struct {
	Context *middleware.Context
	Handler GetAllofHandler
}

func (o *GetAllof) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAllofParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
